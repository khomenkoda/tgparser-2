require("dotenv").config();
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const input = require("input");
const schedule = require("node-schedule");
const fs = require("fs");

// –ó–º—ñ–Ω–Ω—ñ –∑ .env
const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const phoneNumber = process.env.PHONE_NUMBER;
const sessionFileName = `${process.env.SESSION_NAME || "anon"}.session`;
const targetChannel = process.env.TARGET_CHANNEL;

// –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É
const rawWords = process.env.SEARCH_WORD.split(",").map((word) => word.trim());
const searchRegexes = rawWords.map(
  (word) =>
    new RegExp(`(?:^|[^–∞-—è—ñ—ó—î“ëa-zA-Z0-9])${word}(?:[^–∞-—è—ñ—ó—î“ëa-zA-Z0-9]|$)`, "i")
);

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤ –±–µ–∑ –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
const channelUsernames = process.env.CHANNEL_USERNAME.split(",")
  .map((c) => c.trim())
  .filter((c) => c.length > 0);

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó, —è–∫—â–æ —ñ—Å–Ω—É—î
let sessionString = "";
if (fs.existsSync(sessionFileName)) {
  sessionString = fs.readFileSync(sessionFileName, "utf-8");
  console.log(`üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–µ—Å—ñ—é –∑ ${sessionFileName}`);
} else {
  console.log("üì≠ –°–µ—Å—ñ–π–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å–∫ –∑ –Ω—É–ª—è.");
}

const stringSession = new StringSession(sessionString);
let lastCheckedTime = Math.floor(Date.now() / 1000);
const sentMessageIds = new Set();

const delay = (ms) => new Promise((res) => setTimeout(res, ms));

const formatDate = (timestamp) => {
  const date = new Date(timestamp * 1000);
  return date.toLocaleString();
};

async function initClient() {
  console.log("üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –∫–ª—ñ—î–Ω—Ç–∞...");

  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => phoneNumber,
    password: async () => await input.text("üîê –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (2FA, —è–∫—â–æ —î): "),
    phoneCode: async () => await input.text("üì© –í–≤–µ–¥–∏ –∫–æ–¥ –∑ Telegram: "),
    onError: (err) => console.log("‚ùó Login error:", err),
  });

  const savedSession = client.session.save();
  const path = require("path");

  const dir = path.dirname(sessionFileName);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }

  fs.writeFileSync(sessionFileName, savedSession);
  console.log(`üíæ –°–µ—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª: ${sessionFileName}`);

  return client;
}

async function checkMessages(client) {
  try {
    console.log(
      `üîç –ü–æ—à—É–∫ —Å–ª—ñ–≤: [${rawWords.join(
        ", "
      )}] —É –∫–∞–Ω–∞–ª–∞—Ö: @${channelUsernames.join(", @")}`
    );

    const allMatches = new Map();

    for (const channelUsername of channelUsernames) {
      try {
        console.log(`üì° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ @${channelUsername}...`);

        const channel = await client.getEntity(channelUsername);
        const messages = await client.getMessages(channel, { limit: 5 });

        for (const msg of messages) {
          const msgKey = `${channelUsername}:${msg.id}`;
          if (
            !msg.text ||
            Math.floor(msg.date) < lastCheckedTime ||
            sentMessageIds.has(msgKey)
          )
            continue;

          const matchedWords = rawWords.filter((_, i) =>
            searchRegexes[i].test(msg.text)
          );

          if (matchedWords.length > 0) {
            console.log(
              `‚úÖ –ó–±—ñ–≥ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ ${msg.id}: [${matchedWords.join(", ")}]`
            );

            allMatches.set(msgKey, {
              link: `https://t.me/${channelUsername}/${msg.id}`,
              channel: channelUsername,
              date: msg.date,
              words: matchedWords,
            });

            sentMessageIds.add(msgKey);
            if (sentMessageIds.size > 1000) {
              const oldest = [...sentMessageIds][0];
              sentMessageIds.delete(oldest);
            }
          } else {
            console.log(`‚ùå –ù–µ–º–∞—î –∑–±—ñ–≥—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ ${msg.id}`);
          }
        }

        console.log(`‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ @${channelUsername}`);
      } catch (err) {
        console.error(`‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ @${channelUsername}:`, err);
      }
    }

    lastCheckedTime = Math.floor(Date.now() / 1000);

    if (allMatches.size > 0) {
      let compiledMessage = `üíõüíô –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–≤—ñ –∫–∞–Ω–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª—è—é—Ç—å –ø—Ä–æ –ß–µ—Ä–Ω—ñ–≥—ñ–≤:\n\n`;

      for (const match of allMatches.values()) {
        compiledMessage += `üîó <a href="${match.link}">@${
          match.channel
        }</a> ‚Äî <i>${formatDate(match.date)}</i>\n`;
      }

      await delay(1000);
      client.setParseMode("html");

      await client.sendMessage(targetChannel, {
        message: compiledMessage,
      });

      console.log("üì® –ü—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!");
    } else {
      console.log("üîç –ù–æ–≤–∏—Ö –∑–±—ñ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }

    console.log(new Date() + ": –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  } catch (error) {
    console.error("‚ùó –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ checkMessages:", error);
  }
}

async function main() {
  try {
    const client = await initClient();

    await checkMessages(client); // –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫

    schedule.scheduleJob("*/3 * * * *", async () => {
      await checkMessages(client);
    });

    console.log(
      `‚úÖ –ü–∞—Ä—Å–µ—Ä –ø—Ä–∞—Ü—é—î. –°–ª—ñ–¥–∫—É—î –∑–∞ @${channelUsernames.join(
        ", @"
      )} –∫–æ–∂–Ω—ñ 3 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è —Å–ª—ñ–≤: [${rawWords.join(", ")}]`
    );
  } catch (err) {
    console.error("‚ùó –ü–æ–º–∏–ª–∫–∞ –≤ main():", err);
  }
}

main();
