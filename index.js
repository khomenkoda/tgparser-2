require("dotenv").config();
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const schedule = require("node-schedule");
const input = require("input");

const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const sessionFileName = "session.txt";
const botToken = process.env.BOT_TOKEN;
const targetChannel = process.env.TARGET_CHANNEL;

const rawWords = process.env.SEARCH_WORD.split(",").map((w) => w.trim());
const searchRegexes = rawWords.map(
  (word) =>
    new RegExp(`(?:^|[^–∞-—è—ñ—ó—î“ëa-zA-Z0-9])${word}(?:[^–∞-—è—ñ—ó—î“ëa-zA-Z0-9]|$)`, "i")
);

// –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞–Ω–∞–ª–∏
const channelUsernames = [
  ...new Set(process.env.CHANNEL_USERNAME.split(",").map((c) => c.trim())),
];

const stringSession = new StringSession(
  fs.existsSync(sessionFileName)
    ? fs.readFileSync(sessionFileName, "utf-8")
    : ""
);

const sentMessageIds = new Set();
let lastCheckedTime = Math.floor(Date.now() / 1000);

// –ó–∞—Ç—Ä–∏–º–∫–∞
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

// –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç fetch
const fetch = (...args) =>
  import("node-fetch").then(({ default: fetch }) => fetch(...args));

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
const formatDate = (timestamp) => {
  const date = new Date(timestamp * 1000);
  return date.toLocaleString("uk-UA");
};

// **–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–º**
const logWithTime = (message, isError = false) => {
  const now = new Date();
  const timeString = now.toLocaleTimeString("uk-UA", { hour12: false }); // –§–æ—Ä–º–∞—Ç HH:MM:SS
  if (isError) {
    console.error(`[${timeString}] ${message}`);
  } else {
    console.log(`[${timeString}] ${message}`);
  }
};

// –ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É (—Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—ñ–≤)
function shuffleArray(array) {
  const arr = [...array];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Bot API
async function sendBotMessage(message) {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const res = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: targetChannel,
      text: message,
      parse_mode: "HTML",
      disable_web_page_preview: false,
    }),
  });

  const json = await res.json();
  if (!json.ok) {
    logWithTime(`‚ùó Bot API error: ${JSON.stringify(json)}`, true); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime –¥–ª—è –ø–æ–º–∏–ª–æ–∫
  } else {
    logWithTime("üì© üì© üì© –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime
  }
}

// Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
async function initClient() {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => process.env.PHONE_NUMBER,
    password: async () => await input.text("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (2FA Telegram): "),
    phoneCode: async () => await input.text("–í–≤–µ–¥–∏ –∫–æ–¥ –∑ Telegram: "),
    onError: (err) => logWithTime(`Login error: ${err.message}`, true), // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime –¥–ª—è –ø–æ–º–∏–ª–æ–∫
  });

  const savedSession = client.session.save();
  fs.writeFileSync(sessionFileName, savedSession);
  return client;
}

// –û—Å–Ω–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function checkMessages(client) {
  let prevChannel = null;

  const shuffledChannels = shuffleArray(channelUsernames);
  for (const channelUsername of shuffledChannels) {
    if (channelUsername === prevChannel) {
      logWithTime(`‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è @${channelUsername}`); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime
      continue;
    }
    prevChannel = channelUsername;

    try {
      logWithTime(`üì° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ @${channelUsername}...`); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime

      const channel = await client.getEntity(channelUsername);
      const messages = await client.getMessages(channel, { limit: 3 });

      for (const msg of messages) {
        const msgKey = `${channelUsername}:${msg.id}`;
        if (
          !msg.text ||
          Math.floor(msg.date) < lastCheckedTime ||
          sentMessageIds.has(msgKey)
        )
          continue;

        const matchedWords = rawWords.filter((_, i) =>
          searchRegexes[i].test(msg.text)
        );

        if (matchedWords.length > 0) {
          const link = `https://t.me/${channelUsername}/${msg.id}`;
          const compiled = `üîî <b>–£–≤–∞–≥–∞ @${channelUsername}</b>\nüîó <a href="${link}">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>\nüïì <i>${formatDate(
            msg.date
          )}</i>`;
          await sendBotMessage(compiled);

          sentMessageIds.add(msgKey);
          if (sentMessageIds.size > 1000)
            sentMessageIds.delete([...sentMessageIds][0]);
        }
      }

      logWithTime(`‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ @${channelUsername}`); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime
    } catch (err) {
      logWithTime(`‚ùó –ü–æ–º–∏–ª–∫–∞ –≤ @${channelUsername}: ${err.message}`, true); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime –¥–ª—è –ø–æ–º–∏–ª–æ–∫
    }

    // –†–∞–Ω–¥–æ–º–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ 4-6 —Å–µ–∫—É–Ω–¥
    await delay(2000 + Math.random() * 2000);
  }

  lastCheckedTime = Math.floor(Date.now() / 1000);
}

// –ó–∞–ø—É—Å–∫
async function main() {
  const client = await initClient();
  await checkMessages(client);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
  schedule.scheduleJob("*/1 * * * *", async () => {
    await checkMessages(client);
  });

  logWithTime(" ‚ñ∂Ô∏è‚ñ∂Ô∏è‚ñ∂Ô∏è –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ. –ë–æ—Ç –ø—Ä–∞—Ü—é—î."); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ logWithTime
}

main();
