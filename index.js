require("dotenv").config();
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const schedule = require("node-schedule");
const input = require("input");

const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const sessionFileName = "session.txt";
const botToken = process.env.BOT_TOKEN;
const targetChannel = process.env.TARGET_CHANNEL;

// –¢–æ–∫–µ–Ω –¥–ª—è alerts.in.ua API
const alertsApiToken = process.env.ALERTS_API_TOKEN;
const chernigivOblatUID = "25"; // UID –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ

// –ü–æ—à—É–∫–æ–≤—ñ —Å–ª–æ–≤–∞ (—Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∏ –ß–µ—Ä–Ω—ñ–≥–æ–≤–∞)
const rawWords = process.env.SEARCH_WORD.split(",").map((w) => w.trim());
const searchRegexes = rawWords.map(
  (word) =>
    new RegExp(`(?:^|[^\\p{L}\\p{N}_])(${word})(?=[^\\p{L}\\p{N}_]|$)`, "iu")
);

// –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞–Ω–∞–ª–∏
const channelUsernames = [
  ...new Set(process.env.CHANNEL_USERNAME.split(",").map((c) => c.trim())),
];

const stringSession = new StringSession(
  fs.existsSync(sessionFileName)
    ? fs.readFileSync(sessionFileName, "utf-8")
    : ""
);

const sentMessageIds = new Set();
let lastCheckedTime = Math.floor(Date.now() / 1000);

// –°—Ç–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–∏
let isParserRunning = false;
let alertCheckJob = null;

// –ó–∞—Ç—Ä–∏–º–∫–∞
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

// –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç fetch
const fetch = (...args) =>
  import("node-fetch").then(({ default: fetch }) => fetch(...args));

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
const formatDate = (timestamp) => {
  const date = new Date(timestamp * 1000);
  return date.toLocaleString("uk-UA");
};

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–º
const logWithTime = (message, isError = false) => {
  const now = new Date();
  const timeString = now.toLocaleTimeString("uk-UA", { hour12: false });
  if (isError) {
    console.error(`[${timeString}] ${message}`);
  } else {
    console.log(`[${timeString}] ${message}`);
  }
};

// –¢–∞–π–º–∞—É—Ç
const withTimeout = (promise, ms) => {
  return Promise.race([
    promise,
    new Promise((_, reject) =>
      setTimeout(() => reject(new Error("‚è± –¢–∞–π–º-–∞—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")), ms)
    ),
  ]);
};

// –ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É
function shuffleArray(array) {
  const arr = [...array];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –≤ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ
async function checkAirRaidAlert() {
  try {
    const url = `https://api.alerts.in.ua/v1/iot/active_air_raid_alerts/${chernigivOblatUID}.json`;
    const response = await fetch(url, {
      headers: {
        Authorization: `Bearer ${alertsApiToken}`,
      },
    });

    if (!response.ok) {
      logWithTime(
        `‚ùó –ü–æ–º–∏–ª–∫–∞ API alerts.in.ua: ${response.status} ${response.statusText}`,
        true
      );
      return null;
    }

    const status = await response.text();
    const alertStatus = status.replace(/"/g, ""); // –í–∏–¥–∞–ª—è—î–º–æ –ª–∞–ø–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

    logWithTime(
      `üö® –°—Ç–∞–Ω –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –≤ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ: ${alertStatus}`
    );

    // A - –∞–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞, P - —á–∞—Å—Ç–∫–æ–≤–∞ —Ç—Ä–∏–≤–æ–≥–∞, N - –Ω–µ–º–∞—î —Ç—Ä–∏–≤–æ–≥–∏
    return alertStatus;
  } catch (error) {
    logWithTime(
      `‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏: ${error.message}`,
      true
    );
    return null;
  }
}

// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram —á–µ—Ä–µ–∑ Bot API
async function sendBotMessage(message) {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const res = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: targetChannel,
      text: message,
      parse_mode: "HTML",
      disable_web_page_preview: false,
    }),
  });

  const json = await res.json();
  if (!json.ok) {
    logWithTime(`‚ùó Bot API error: ${JSON.stringify(json)}`, true);
  } else {
    logWithTime("üì© üì© üì© –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!");
  }
}

// Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
async function initClient() {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => process.env.PHONE_NUMBER,
    password: async () => await input.text("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (2FA Telegram): "),
    phoneCode: async () => await input.text("–í–≤–µ–¥–∏ –∫–æ–¥ –∑ Telegram: "),
    onError: (err) => logWithTime(`Login error: ${err.message}`, true),
  });

  const savedSession = client.session.save();
  fs.writeFileSync(sessionFileName, savedSession);
  return client;
}

// –û—Å–Ω–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function checkMessages(client) {
  if (!isParserRunning) {
    logWithTime("‚è∏ –ü–∞—Ä—Å–µ—Ä –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ - –Ω–µ–º–∞—î –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏");
    return;
  }

  let prevChannel = null;
  const shuffledChannels = shuffleArray(channelUsernames);

  for (const channelUsername of shuffledChannels) {
    if (channelUsername === prevChannel) {
      logWithTime(`‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è @${channelUsername}`);
      continue;
    }
    prevChannel = channelUsername;

    try {
      logWithTime(`üì° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ @${channelUsername}...`);

      const channel = await client.getEntity(channelUsername);
      const messages = await client.getMessages(channel, { limit: 3 });

      for (const msg of messages) {
        const msgKey = `${channelUsername}:${msg.id}`;
        if (
          !msg.text ||
          Math.floor(msg.date) < lastCheckedTime ||
          sentMessageIds.has(msgKey)
        )
          continue;

        const matchedWords = rawWords.filter((_, i) =>
          searchRegexes[i].test(msg.text)
        );

        if (matchedWords.length > 0) {
          const link = `https://t.me/${channelUsername}/${msg.id}`;
          const compiled = `üîî <b>–£–≤–∞–≥–∞ @${channelUsername}</b>\nüîó <a href="${link}">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>\nüïì <i>${formatDate(
            msg.date
          )}</i>`;
          await sendBotMessage(compiled);

          sentMessageIds.add(msgKey);
          if (sentMessageIds.size > 1000)
            sentMessageIds.delete([...sentMessageIds][0]);
        }
      }

      logWithTime(`‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ @${channelUsername}`);
    } catch (err) {
      logWithTime(`‚ùó –ü–æ–º–∏–ª–∫–∞ –≤ @${channelUsername}: ${err.message}`, true);
    }

    await delay(2000 + Math.random() * 2000);
  }

  lastCheckedTime = Math.floor(Date.now() / 1000);
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
async function startParser(client) {
  if (isParserRunning) {
    logWithTime("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π");
    return;
  }

  isParserRunning = true;
  logWithTime("üî¥üî¥üî¥ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ - –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞!");

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
  schedule.scheduleJob("*/1 * * * *", async () => {
    if (isParserRunning) {
      try {
        await withTimeout(checkMessages(client), 60000);
      } catch (err) {
        logWithTime(`‚ùó –ó–∞–≤–∏—Å–∞–Ω–Ω—è: ${err.message}`, true);
      }
    }
  });
}

// –ó—É–ø–∏–Ω–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
async function stopParser() {
  if (!isParserRunning) {
    logWithTime("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–∏–π");
    return;
  }

  isParserRunning = false;
  logWithTime(" üü¢üü¢üü¢–ü–∞—Ä—Å–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ - –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
}

// –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥
async function monitorAirRaidAlerts(client) {
  const alertStatus = await checkAirRaidAlert();

  if (alertStatus === null) {
    logWithTime("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏", true);
    return;
  }

  // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–∞ —Ç—Ä–∏–≤–æ–≥–∞ (A –∞–±–æ P), –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–µ—Ä
  if ((alertStatus === "A" || alertStatus === "P") && !isParserRunning) {
    await startParser(client);
  }
  // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç—Ä–∏–≤–æ–≥–∏ (N), –∑—É–ø–∏–Ω—è—î–º–æ –ø–∞—Ä—Å–µ—Ä
  else if (alertStatus === "N" && isParserRunning) {
    await stopParser();
  }
}

// –ó–∞–ø—É—Å–∫
async function main() {
  if (!alertsApiToken) {
    logWithTime(
      "‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω –¥–ª—è alerts.in.ua API (ALERTS_API_TOKEN)",
      true
    );
    process.exit(1);
  }

  const client = await initClient();

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
  await monitorAirRaidAlerts(client);

  // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞–Ω—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
  alertCheckJob = schedule.scheduleJob("*/30 * * * * *", async () => {
    try {
      await monitorAirRaidAlerts(client);
    } catch (err) {
      logWithTime(
        `‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥: ${err.message}`,
        true
      );
    }
  });

  logWithTime("üöÄ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –∑–∞–ø—É—â–µ–Ω–∞");
  logWithTime("üì° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥");
  logWithTime("üîç –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥ —á–∞—Å –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏");
}

// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏
process.on("SIGINT", () => {
  logWithTime(" –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏...");
  if (alertCheckJob) {
    alertCheckJob.cancel();
  }
  process.exit(0);
});

process.on("SIGTERM", () => {
  logWithTime(" –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏...");
  if (alertCheckJob) {
    alertCheckJob.cancel();
  }
  process.exit(0);
});

main().catch((err) => {
  logWithTime(`‚ùó –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err.message}`, true);
  process.exit(1);
});
